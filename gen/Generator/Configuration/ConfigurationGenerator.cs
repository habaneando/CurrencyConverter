namespace Generator;

[Generator]
public class ConfigurationGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        // Get all appsettings.json files
        var jsonFiles = context.AdditionalTextsProvider
            .Where(file => file.Path.EndsWith("appsettings.json") ||
                          file.Path.Contains("appsettings.") && file.Path.EndsWith(".json"))
            .Select((file, ct) => new JsonFileInfo
            {
                Path = file.Path,
                Content = file.GetText(ct)?.ToString() ?? string.Empty
            });

        // Generate configuration classes
        context.RegisterSourceOutput(jsonFiles.Collect(), (context, jsonFiles) => GenerateConfigurationClasses(context, jsonFiles));
    }

    private void GenerateConfigurationClasses(SourceProductionContext context,
        ImmutableArray<JsonFileInfo> jsonFiles)
    {
        var allSettings = new Dictionary<string, JsonElement>();

        // Parse all JSON files and merge settings
        foreach (var file in jsonFiles)
        {
            try
            {
                if (!string.IsNullOrWhiteSpace(file.Content))
                {
                    var jsonDoc = JsonDocument.Parse(file.Content);
                    MergeJsonElements(allSettings, jsonDoc.RootElement);
                }
            }
            catch (JsonException)
            {
                // Skip invalid JSON files
                continue;
            }
        }

        if (allSettings.Count == 0)
            return;

        // Generate the main configuration class
        var mainClassBuilder = new StringBuilder();
        mainClassBuilder.AppendLine("// <auto-generated />");
        mainClassBuilder.AppendLine("using Microsoft.Extensions.Options;");
        mainClassBuilder.AppendLine("using System.ComponentModel.DataAnnotations;");
        mainClassBuilder.AppendLine();
        mainClassBuilder.AppendLine("namespace Generated.Configuration");
        mainClassBuilder.AppendLine("{");

        // Generate nested classes for each configuration section
        var nestedClasses = new List<string>();

        foreach (var kvp in allSettings)
        {
            var sectionName = kvp.Key;
            var sectionElement = kvp.Value;

            if (sectionElement.ValueKind == JsonValueKind.Object)
            {
                var className = $"{ToPascalCase(sectionName)}Options";
                var classCode = GenerateOptionsClass(className, sectionElement, 1);
                nestedClasses.Add(classCode);

                mainClassBuilder.AppendLine($"    public {className} {ToPascalCase(sectionName)} {{ get; set; }} = new();");
            }
            else
            {
                // Handle primitive values at root level
                var propertyType = GetCSharpType(sectionElement);
                var propertyName = ToPascalCase(sectionName);
                mainClassBuilder.AppendLine($"    public {propertyType} {propertyName} {{ get; set; }}");
            }
        }

        mainClassBuilder.AppendLine();

        // Add nested classes
        foreach (var nestedClass in nestedClasses)
        {
            mainClassBuilder.AppendLine(nestedClass);
            mainClassBuilder.AppendLine();
        }

        mainClassBuilder.AppendLine("}");

        // Generate the main AppSettings class
        var mainClass = $@"// <auto-generated />
using Microsoft.Extensions.Options;
using System.ComponentModel.DataAnnotations;

namespace Generated.Configuration
{{
    public class AppSettings
    {{
{string.Join(Environment.NewLine, allSettings.Select(kvp =>
        {
            var sectionName = kvp.Key;
            var sectionElement = kvp.Value;

            if (sectionElement.ValueKind == JsonValueKind.Object)
            {
                var className = $"{ToPascalCase(sectionName)}Options";
                return $"        public {className} {ToPascalCase(sectionName)} {{ get; set; }} = new();";
            }
            else
            {
                var propertyType = GetCSharpType(sectionElement);
                var propertyName = ToPascalCase(sectionName);
                return $"        public {propertyType} {propertyName} {{ get; set; }}";
            }
        }))}
    }}

{string.Join(Environment.NewLine + Environment.NewLine, nestedClasses)}
}}";

        context.AddSource("AppSettings.g.cs", SourceText.From(mainClass, Encoding.UTF8));

        // Generate extension methods for service registration
        var extensionMethods = GenerateServiceExtensions(allSettings);
        context.AddSource("ConfigurationExtensions.g.cs", SourceText.From(extensionMethods, Encoding.UTF8));
    }

    private string GenerateOptionsClass(string className, JsonElement element, int indentLevel)
    {
        var indent = new string(' ', indentLevel * 4);
        var builder = new StringBuilder();

        builder.AppendLine($"{indent}public class {className}");
        builder.AppendLine($"{indent}{{");

        foreach (var property in element.EnumerateObject())
        {
            var propertyName = ToPascalCase(property.Name);

            if (property.Value.ValueKind == JsonValueKind.Object)
            {
                var nestedClassName = $"{propertyName}Options";
                var nestedClass = GenerateOptionsClass(nestedClassName, property.Value, indentLevel + 1);
                builder.AppendLine(nestedClass);
                builder.AppendLine();
                builder.AppendLine($"{indent}    public {nestedClassName} {propertyName} {{ get; set; }} = new();");
            }
            else if (property.Value.ValueKind == JsonValueKind.Array)
            {
                var arrayElementType = GetArrayElementType(property.Value);
                builder.AppendLine($"{indent}    public {arrayElementType}[] {propertyName} {{ get; set; }} = Array.Empty<{arrayElementType}>();");
            }
            else
            {
                var propertyType = GetCSharpType(property.Value);
                var defaultValue = GetDefaultValue(property.Value);
                builder.AppendLine($"{indent}    public {propertyType} {propertyName} {{ get; set; }}{defaultValue}");
            }
        }

        builder.AppendLine($"{indent}}}");
        return builder.ToString();
    }

    private string GenerateServiceExtensions(Dictionary<string, JsonElement> settings)
    {
        var builder = new StringBuilder();
        builder.AppendLine("// <auto-generated />");
        builder.AppendLine("using Microsoft.Extensions.Configuration;");
        builder.AppendLine("using Microsoft.Extensions.DependencyInjection;");
        builder.AppendLine("using Microsoft.Extensions.Options;");
        builder.AppendLine();
        builder.AppendLine("namespace Generated.Configuration");
        builder.AppendLine("{");
        builder.AppendLine("    public static class ConfigurationExtensions");
        builder.AppendLine("    {");
        builder.AppendLine("        public static IServiceCollection AddAppSettingsOptions(this IServiceCollection services, IConfiguration configuration)");
        builder.AppendLine("        {");
        builder.AppendLine("            // Register the main settings");
        builder.AppendLine("            services.Configure<AppSettings>(configuration);");
        builder.AppendLine();

        // Register each section as options
        foreach (var kvp in settings)
        {
            var sectionName = kvp.Key;
            var sectionElement = kvp.Value;

            if (sectionElement.ValueKind == JsonValueKind.Object)
            {
                var className = $"{ToPascalCase(sectionName)}Options";
                builder.AppendLine($"            services.Configure<{className}>(configuration.GetSection(\"{sectionName}\"));");
            }
        }

        builder.AppendLine();
        builder.AppendLine("            return services;");
        builder.AppendLine("        }");
        builder.AppendLine();
        builder.AppendLine("        public static IServiceCollection AddAppSettingsValidation(this IServiceCollection services)");
        builder.AppendLine("        {");

        // Add validation for each options class
        foreach (var kvp in settings)
        {
            var sectionName = kvp.Key;
            var sectionElement = kvp.Value;

            if (sectionElement.ValueKind == JsonValueKind.Object)
            {
                var className = $"{ToPascalCase(sectionName)}Options";
                builder.AppendLine($"            services.AddOptions<{className}>().ValidateDataAnnotations();");
            }
        }

        builder.AppendLine("            services.AddOptions<AppSettings>().ValidateDataAnnotations();");
        builder.AppendLine();
        builder.AppendLine("            return services;");
        builder.AppendLine("        }");
        builder.AppendLine("    }");
        builder.AppendLine("}");

        return builder.ToString();
    }

    private void MergeJsonElements(Dictionary<string, JsonElement> target, JsonElement source)
    {
        foreach (var property in source.EnumerateObject())
        {
            target[property.Name] = property.Value;
        }
    }

    private string GetCSharpType(JsonElement element)
    {
        return element.ValueKind switch
        {
            JsonValueKind.String => "string",
            JsonValueKind.Number => element.TryGetInt32(out _) ? "int" : "double",
            JsonValueKind.True or JsonValueKind.False => "bool",
            JsonValueKind.Array => "object[]",
            JsonValueKind.Object => "object",
            _ => "string"
        };
    }

    private string GetArrayElementType(JsonElement arrayElement)
    {
        if (arrayElement.GetArrayLength() == 0)
            return "string";

        var firstElement = arrayElement.EnumerateArray().First();
        return GetCSharpType(firstElement);
    }

    private string GetDefaultValue(JsonElement element)
    {
        return element.ValueKind switch
        {
            JsonValueKind.String => $" = \"{element.GetString()}\";",
            JsonValueKind.Number => element.TryGetInt32(out var intVal) ? $" = {intVal};" : $" = {element.GetDouble()};",
            JsonValueKind.True => " = true;",
            JsonValueKind.False => " = false;",
            _ => ";"
        };
    }

    private string ToPascalCase(string input)
    {
        if (string.IsNullOrEmpty(input))
            return input;

        return char.ToUpper(input[0]) + input.Substring(1);
    }
}
